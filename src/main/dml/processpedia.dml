package pt.ist.processpedia.server.domain;

enum pt.ist.processpedia.shared.dto.domain.DataObjectType as DataObjectType;
enum pt.ist.processpedia.server.domain.Request.RequestState as RequestState;

class Processpedia;

class Party {
  String name;
  String avatarUrl;
}

class OperatingParty extends Party;

class Role {
  String name;
  String description;
}

class RolePlay;
class RoleAssociation;

class Accountability;
class AccountabilityType {
  String name;
  String description;
}

class EffectivePeriod {
  DateTime startTime;
  DateTime endTime;
}

class OrganizationalUnit extends Party;
class System extends OperatingParty;
class Person extends OperatingParty;

class User extends Person {
  String email;
  boolean active;
  String activationKey;
}

class credential.CredentialInfo;

class credential.CasCredentialInfo extends credential.CredentialInfo {
  String netId;
}

class credential.PasswordCredentialInfo extends credential.CredentialInfo {
  String passwordHash;
  String salt;
}

class Process {
  String description;
  DateTime creationTimestamp;
  DateTime completionTimestamp;
}

class Request {
  RequestState state;
  Boolean expectsAnswer;
  DateTime creationTimestamp;
  DateTime lastUpdateTimestamp;
  DateTime completionTimestamp;
}

class TagManager;

class Tag {
  String keyword;
}

class Comment {
  DateTime creationTimestamp;
  String commentaryText;
}

class Queue {
  String title;
}

class PrivateQueue extends Queue;

class DynamicQueue extends Queue;
class ScriptQueue extends DynamicQueue;
class SmartQueue extends DynamicQueue;
class RolePlayQueue extends SmartQueue;

class DataObject;

class DataObjectVersion {
  DateTime creationTimestamp;
  DataObjectType type;
  String externalizedValue;
}

class DataObjectVersionRelation;
class DataObjectVersionRelationVersion;

relation RolePlayMayHaveEffectivePeriod {
  RolePlay playsRole rolePlay { multiplicity 0..1; }
  EffectivePeriod playsRole effectivePeriod { multiplicity 0..1; }
}

relation AccountabilityHasAnEffectivePeriod {
  Accountability playsRole accountability { multiplicity 0..1; }
  EffectivePeriod playsRole effectivePeriod { multiplicity 0..1; }
}

relation PartyPlaysRoles {
  Party playsRole party { multiplicity 1..1; }
  RolePlay playsRole rolePlay { multiplicity 0..*; }
}

relation RoleHasRoleAssociations {
  Role playsRole role { multiplicity 1..1; }
  RoleAssociation playsRole roleAssociation { multiplicity 0..*; }
}

relation RolesAreAssociatedToAccountabilityTypes {
  RoleAssociation playsRole roleAssociation { multiplicity 0..*; }
  AccountabilityType playsRole accountabilityType { multiplicity 1..1; }
}

relation RolePlaysReferToRoleAssociations {
  RoleAssociation playsRole roleAssociation { multiplicity 1..1; }
  RolePlay playsRole rolePlay { multiplicity 0..*; }
}

relation AccountabilityHasAccountabilityType {
  AccountabilityType playsRole type { multiplicity 1..1; }
  Accountability playsRole accountability { multiplicity 0..*; }
}

relation ProcesspediaHasParties {
  Processpedia playsRole processpedia { multiplicity 1..1; }
  Party playsRole party { multiplicity 0..*; }
}

relation OperatingPartiesHavePrivateQueues {
  PrivateQueue playsRole privateQueue { multiplicity 1..1; }
  OperatingParty playsRole operatingParty { multiplicity 1..1; }
}

relation ProcesspediaHasATagManager {
  Processpedia playsRole;
  TagManager playsRole tagManager { multiplicity 0..1; }
}

relation ProcesspediaHasProcesses {
  Processpedia playsRole processpedia { multiplicity 1..1; }
  Process playsRole process { multiplicity 0..*; }
}

relation ProcesspediaHasQueues {
  Processpedia playsRole processpedia { multiplicity 1..1; }
  Queue playsRole queue { multiplicity 0..*; }
}

relation TagManagerManagesTags {
  TagManager playsRole tagManager { multiplicity 1..1; }
  Tag playsRole existingTag { multiplicity 0..*; }
}

relation UserHaveCredentialInfo {
  User playsRole user { multiplicity 1..1; }
  credential.CredentialInfo playsRole credentialInfo { multiplicity 1..1; }
}

relation ProcessHasDataObjects {
  Process playsRole process { multiplicity 1..1; }
  DataObject playsRole dataObject { multiplicity 0..*; }
}

relation ProcessHasRequests {
  Process playsRole process { multiplicity 1..1; }
  Request playsRole request { multiplicity 0..*; }
}

relation ProcessHasInitialRequest {
  Process playsRole;
  Request playsRole initialRequest { multiplicity 1..1; }
}

relation ProcessHasCreator {
  Process playsRole createdProcess { multiplicity 0..*; }
  Party playsRole creator { multiplicity 1..1; }
}

relation RequestHasAnInitiator {
  Request playsRole initiatedRequest { multiplicity 0..*; }
  Party playsRole initiator { multiplicity 1..1; }
}

relation RequestMayHaveAnExecutor {
  Request playsRole executingRequest { multiplicity 0..*; }
  Party playsRole executor { multiplicity 0..1; }
}

relation RequestsAreOriginallyPublishedOnQueues {
  Request playsRole request { multiplicity 0..*; }
  Queue playsRole queue { multiplicity 0..*; }
}

relation RequestsMayHaveNextRequests {
  Request playsRole previousRequest { multiplicity 0..1; }
  Request playsRole nextRequest { multiplicity 0..1; }
}

relation RequestMayHaveChildRequests {
  Request playsRole parentRequest { multiplicity 0..1; }
  Request playsRole childRequest { multiplicity 0..*; }
}

relation ProcessHasTitleTag {
  Process playsRole process { multiplicity 0..*; }
  Tag playsRole titleTag { multiplicity 1..1; }
}

relation RequestHasSubjectTag {
  Request playsRole request { multiplicity 0..*; }
  Tag playsRole subjectTag { multiplicity 1..1; }
}

relation CommentHasAuthor {
  Comment playsRole authoredComment { multiplicity 0..*; }
  Party playsRole author { multiplicity 1..1; }
}

relation RequestMayHaveDescriptionComment {
  Request playsRole request { multiplicity 0..1; }
  Comment playsRole descriptionComment { multiplicity 0..1; }
}

relation CommentMayHaveReplies {
  Comment playsRole previousComment { multiplicity 0..1; }
  Comment playsRole nextComment { multiplicity 0..1; }
}

relation DataObjectMayHaveInputDataObjectVersions {
  Request playsRole inputRequest { multiplicity 0..*; }
  DataObjectVersion playsRole inputDataObjectVersion { multiplicity 0..*; }
}

relation DataObjectVersionsAreCreatedInRequests {
  Request playsRole creationRequest { multiplicity 0..1; }
  DataObjectVersion playsRole createdDataObjectVersion { multiplicity 0..*; }
}

relation RequestsMayHaveOutputDataObjectVersions {
  Request playsRole outputRequest { multiplicity 0..*; }
  DataObjectVersion playsRole outputDataObjectVersion { multiplicity 0..*; }
}

relation DataObjectHasVersions {
  DataObject playsRole dataObject { multiplicity 1..1; }
  DataObjectVersion playsRole version { multiplicity 1..*; }
}

relation DataObjectHasLastVersion {
  DataObject playsRole;
  DataObjectVersion playsRole lastVersion { multiplicity 1..1; }
}

relation DataObjectVersionMayHavePreviousAndNextVersions {
  DataObjectVersion playsRole previousVersion { multiplicity 0..1; }
  DataObjectVersion playsRole nextVersion { multiplicity 0..1; }
}

relation DataObjectVersionMayHaveForkedVersions {
  DataObjectVersion playsRole sourceVersion { multiplicity 0..1; }
  DataObjectVersion playsRole forkedVersion { multiplicity 0..*; }
}

relation DataObjectVersionRelationTypeHasVersions {
  DataObjectVersionRelation playsRole relationship { multiplicity 1..1; }
  DataObjectVersionRelationVersion playsRole versions { multiplicity 0..*; }
}

relation DataObjectVersionMayBeSourceOfRelationVersions {
  DataObjectVersion playsRole sourceDataObjectVersion { multiplicity 1..1; }
  DataObjectVersionRelationVersion playsRole sourceDataObjectVersionRelationVersion { multiplicity 0..*; }
}

relation DataObjectVersionMayBeTargetOfRelationVersions {
  DataObjectVersion playsRole targetDataObjectVersion { multiplicity 1..1; }
  DataObjectVersionRelationVersion playsRole targetDataObjectVersionRelationVersion { multiplicity 0..*; }
}

relation DataObjectVersionHasLabelTag {
  DataObjectVersion playsRole taggedDataObjectVersion { multiplicity 0..*; }
  Tag playsRole labelTag { multiplicity 1..1; }
}

relation RolePlayQueueHasRole {
  RolePlayQueue playsRole rolePlayQueue { multiplicity 0..*; }
  Role playsRole role { multiplicity 1..1; }
}

relation AccountabilityIsComposedByRolePlays {
  RolePlay playsRole rolePlay { multiplicity 0..*; }
  Accountability playsRole accountability { multiplicity 1..1; }
}

relation RolePlayQueueHasAccountabilityType {
  RolePlayQueue playsRole rolePlayQueue { multiplicity 0..*; }
  AccountabilityType playsRole accountabilityType { multiplicity 1..1; }
}